name: Backend Tests

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'backend/**'
      - '.github/workflows/backend-tests.yml'
  pull_request:
    branches: [ main, develop ]
    paths:
      - 'backend/**'

jobs:
  test:
    runs-on: ubuntu-latest
    
    defaults:
      run:
        working-directory: backend

    strategy:
      matrix:
        node-version: [18.x, 20.x]

    steps:
    - uses: actions/checkout@v3
    
    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v3
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
        cache-dependency-path: backend/package-lock.json
    
    - name: Install dependencies
      run: npm ci
    
    - name: Generate Prisma Client
      run: npx prisma generate
    
    - name: Run linting
      run: npm run lint
    
    - name: Setup test database
      run: npm run test:db:setup
    
    - name: Run unit tests
      run: npm test
    
    - name: Run E2E tests with coverage
      run: npm run test:coverage
      env:
        NODE_ENV: test
        DATABASE_URL: file:./test.db
        JWT_SECRET: test-jwt-secret
    
    - name: Upload coverage reports
      uses: codecov/codecov-action@v3
      if: matrix.node-version == '20.x'
      with:
        directory: ./backend/coverage
        flags: backend
        name: backend-coverage
    
    - name: Cleanup test database
      if: always()
      run: npm run test:db:cleanup

  security:
    runs-on: ubuntu-latest
    
    defaults:
      run:
        working-directory: backend

    steps:
    - uses: actions/checkout@v3
    
    - name: Use Node.js
      uses: actions/setup-node@v3
      with:
        node-version: 20.x
        cache: 'npm'
        cache-dependency-path: backend/package-lock.json
    
    - name: Install dependencies
      run: npm ci
    
    - name: Run security audit
      run: npm audit --audit-level=moderate
      continue-on-error: true
    
    - name: Check for vulnerable dependencies
      run: |
        npm list --depth=0 | grep -E "(DEPRECATED|WARNING)" || true