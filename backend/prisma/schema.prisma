// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

// Note: SQLite doesn't support enums, so we use String fields with constraints

// Core Models
model User {
  id       String  @id @default(uuid())
  clerkId  String? @unique // Clerk authentication ID (optional for now)
  email    String  @unique
  password String? // Password for authentication
  role     String  @default("STUDENT") // STUDENT, ADMIN, SPONSOR, DEVELOPMENT_OFFICE
  isActive Boolean @default(true)

  // Relationships
  profile             Profile?
  applications        Application[]
  documents           Document[]
  createdPrograms     ScholarshipProgram[] @relation("ProgramCreator")
  createdCycles       ScholarshipCycle[]   @relation("CycleCreator")
  studentScholarships StudentScholarship[]
  renewalReviews      StudentRenewal[]     @relation("RenewalReviewer")
  applicationReviews  ApplicationReview[]
  applicationHistory  ApplicationHistory[]
  auditLogs           AuditLog[]

  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([role])
  @@map("users")
}

// Base profile with common fields for all users
model Profile {
  id             String    @id @default(uuid())
  userId         String    @unique
  firstName      String
  lastName       String
  dateOfBirth    DateTime?
  gender         String? // MALE, FEMALE
  nationality    String?
  phone          String?
  address        String?
  profilePicture String?

  // Relationships
  user                     User                      @relation(fields: [userId], references: [id], onDelete: Cascade)
  studentProfile           StudentProfile?
  reviewerProfile          ReviewerProfile?
  adminProfile             AdminProfile?
  sponsorProfile           SponsorProfile?
  developmentOfficeProfile DevelopmentOfficeProfile?

  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("profiles")
}

// Student-specific profile data
model StudentProfile {
  id                 String    @id @default(uuid())
  profileId          String    @unique
  studentId          String    @unique
  program            String
  level              String // UNDERGRADUATE, MASTERS, PHD
  yearOfStudy        Int
  gpa                Float?
  institution        String?
  expectedGraduation DateTime?

  // Relationships
  profile Profile @relation(fields: [profileId], references: [id], onDelete: Cascade)

  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([studentId])
  @@index([level])
  @@index([program])
  @@map("student_profiles")
}

// Reviewer-specific profile data
model ReviewerProfile {
  id              String  @id @default(uuid())
  profileId       String  @unique
  expertiseAreas  String // JSON array of expertise areas
  department      String?
  yearsExperience Int?
  certifications  String? // JSON array of certifications
  reviewQuota     Int     @default(10)
  isActive        Boolean @default(true)

  // Relationships
  profile Profile @relation(fields: [profileId], references: [id], onDelete: Cascade)

  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([department])
  @@index([isActive])
  @@map("reviewer_profiles")
}

// Admin-specific profile data
model AdminProfile {
  id                 String    @id @default(uuid())
  profileId          String    @unique
  permissions        String // JSON array of permissions
  managedDepartments String? // JSON array of departments
  accessLevel        String    @default("STANDARD") // STANDARD, SUPER_ADMIN
  lastLogin          DateTime?

  // Relationships
  profile Profile @relation(fields: [profileId], references: [id], onDelete: Cascade)

  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([accessLevel])
  @@map("admin_profiles")
}

// Individual sponsor profile data (for personal sponsors)
model SponsorProfile {
  id               String  @id @default(uuid())
  profileId        String  @unique
  organizationName String?
  position         String?
  sponsorType      String  @default("INDIVIDUAL") // INDIVIDUAL, ORGANIZATION
  totalContributed Float   @default(0)
  preferredCauses  String? // JSON array of preferred scholarship types
  isVerified       Boolean @default(false)

  // Relationships
  profile Profile @relation(fields: [profileId], references: [id], onDelete: Cascade)

  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([sponsorType])
  @@index([isVerified])
  @@map("sponsor_profiles")
}

model Sponsor {
  id            String  @id @default(uuid())
  name          String
  type          String // INDIVIDUAL, ORGANIZATION, GOVERNMENT
  contactPerson String?
  email         String?
  phone         String?
  address       String?
  website       String?
  logoUrl       String?
  totalFunding  Float   @default(0)
  isActive      Boolean @default(true)

  // Relationships
  programs ScholarshipProgram[]

  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([name])
  @@index([type])
  @@index([isActive])
  @@map("sponsors")
}

// Scholarship Program (Master Template) - runs for multiple years
model ScholarshipProgram {
  id          String  @id @default(uuid())
  sponsorId   String
  name        String // "Africa University Excellence Scholarship"
  description String?
  createdBy   String?

  // Program Timeline
  startYear Int // 2020
  endYear   Int? // null for ongoing programs
  isActive  Boolean @default(true)

  // Template Defaults for Auto-Creation
  defaultAmount               Float
  defaultCurrency             String @default("USD")
  defaultSlots                Int
  defaultDisbursementSchedule String @default("SEMESTER") // MONTHLY, QUARTERLY, SEMESTER, ANNUAL
  maxYearsPerStudent          Int    @default(1)

  // Application Timeline Templates
  defaultAppStartMonth Int @default(4) // April
  defaultAppStartDay   Int @default(1) // 1st
  defaultAppEndMonth   Int @default(6) // June
  defaultAppEndDay     Int @default(30) // 30th

  // Automation Settings
  isRecurring        Boolean @default(true) // Auto-create yearly cycles
  isFullyAutomated   Boolean @default(false) // Skip manual approval
  autoLaunchCycles   Boolean @default(false) // Auto-open applications
  cycleCreationMonth Int     @default(1) // January

  // Smart Adjustment Rules
  amountAdjustmentRule    String? // INFLATION_ADJUSTED, SPONSOR_BUDGET, FIXED
  slotAdjustmentRule      String? // PREVIOUS_YEAR_DEMAND, FIXED, BUDGET_BASED
  inheritFromPreviousYear Boolean @default(true)
  autoApprovalThreshold   Float?  @default(0.95)

  // Relationships
  sponsor             Sponsor                      @relation(fields: [sponsorId], references: [id])
  creator             User?                        @relation("ProgramCreator", fields: [createdBy], references: [id])
  cycles              ScholarshipCycle[]
  criteria            ScholarshipProgramCriteria[]
  studentScholarships StudentScholarship[]

  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([sponsorId])
  @@index([startYear, endYear])
  @@index([isActive])
  @@index([isRecurring])
  @@map("scholarship_programs")
}

// Scholarship Cycle (Yearly Instance) - specific application round
model ScholarshipCycle {
  id           String  @id @default(uuid())
  programId    String
  academicYear String // "2025-2026"
  displayName  String? // Auto-generated: "AU Excellence 2025-2026"

  // Cycle-Specific Settings (can override program defaults)
  amount               Float
  currency             String @default("USD")
  totalSlots           Int
  availableSlots       Int
  durationMonths       Int    @default(12)
  disbursementSchedule String @default("SEMESTER")

  // Timeline
  applicationStartDate DateTime
  applicationEndDate   DateTime
  reviewStartDate      DateTime?
  announcementDate     DateTime?
  studyPeriodStart     DateTime?

  // Status & Results
  status               String @default("DRAFT") // DRAFT, READY_FOR_LAUNCH, OPEN, CLOSED, REVIEWING, COMPLETED, CANCELLED
  applicationsReceived Int    @default(0)
  studentsSelected     Int    @default(0)
  totalDisbursed       Float  @default(0)

  // Creation Method
  createdBy      String?
  creationMethod String  @default("MANUAL") // MANUAL, AUTO_GENERATED

  // Relationships
  program             ScholarshipProgram         @relation(fields: [programId], references: [id], onDelete: Cascade)
  creator             User?                      @relation("CycleCreator", fields: [createdBy], references: [id])
  criteria            ScholarshipCycleCriteria[]
  applications        Application[]
  studentScholarships StudentScholarship[]
  renewals            StudentRenewal[]

  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([programId, academicYear]) // One cycle per program per year
  @@index([programId])
  @@index([academicYear])
  @@index([status])
  @@index([applicationStartDate, applicationEndDate])
  @@index([creationMethod])
  @@map("scholarship_cycles")
}

// Program-level criteria template (inherited by cycles)
model ScholarshipProgramCriteria {
  id            String  @id @default(uuid())
  programId     String
  criteriaType  String // MIN_GPA, NATIONALITY, GENDER, ACADEMIC_LEVEL, etc.
  criteriaValue String // JSON string for different criteria
  isMandatory   Boolean @default(true)
  isTemplate    Boolean @default(true) // Template for auto-generated cycles

  // Relationships
  program ScholarshipProgram @relation(fields: [programId], references: [id], onDelete: Cascade)

  // Timestamps
  createdAt DateTime @default(now())

  @@index([programId])
  @@index([criteriaType])
  @@map("scholarship_program_criteria")
}

// Cycle-specific criteria (can override program criteria)
model ScholarshipCycleCriteria {
  id            String  @id @default(uuid())
  cycleId       String
  criteriaType  String // MIN_GPA, NATIONALITY, GENDER, ACADEMIC_LEVEL, etc.
  criteriaValue String // JSON string for different criteria
  isMandatory   Boolean @default(true)
  inheritedFrom String? // programCriteriaId if inherited

  // Relationships
  cycle ScholarshipCycle @relation(fields: [cycleId], references: [id], onDelete: Cascade)

  // Timestamps
  createdAt DateTime @default(now())

  @@index([cycleId])
  @@index([criteriaType])
  @@map("scholarship_cycle_criteria")
}

model Application {
  id                String    @id @default(uuid())
  applicationNumber String    @unique
  userId            String
  cycleId           String // Applications are to specific cycles, not programs
  applicationType   String    @default("NEW") // NEW, RENEWAL
  status            String    @default("DRAFT") // DRAFT, SUBMITTED, UNDER_REVIEW, APPROVED, REJECTED, WITHDRAWN
  motivationLetter  String?
  additionalInfo    String? // JSON string
  submittedAt       DateTime?
  reviewedAt        DateTime?
  decisionAt        DateTime?
  decisionBy        String?
  decisionNotes     String?
  score             Float?

  // Relationships
  user      User                  @relation(fields: [userId], references: [id])
  cycle     ScholarshipCycle      @relation(fields: [cycleId], references: [id])
  documents ApplicationDocument[]
  reviews   ApplicationReview[]
  history   ApplicationHistory[]

  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, cycleId]) // Prevent duplicate applications per cycle
  @@index([userId])
  @@index([cycleId])
  @@index([status])
  @@index([submittedAt])
  @@index([applicationType])
  @@map("applications")
}

model Document {
  id           String    @id @default(uuid())
  userId       String
  documentType String // TRANSCRIPT, RECOMMENDATION, FINANCIAL, IDENTITY, OTHER
  fileName     String
  filePath     String
  fileSize     Int
  mimeType     String
  checksum     String?
  isVerified   Boolean   @default(false)
  verifiedBy   String?
  verifiedAt   DateTime?
  expiryDate   DateTime?

  // Relationships
  user         User                  @relation(fields: [userId], references: [id])
  applications ApplicationDocument[]

  // Timestamps
  createdAt DateTime @default(now())

  @@index([userId])
  @@index([documentType])
  @@index([isVerified])
  @@map("documents")
}

model ApplicationDocument {
  id            String  @id @default(uuid())
  applicationId String
  documentId    String
  isRequired    Boolean @default(true)

  // Relationships
  application Application @relation(fields: [applicationId], references: [id], onDelete: Cascade)
  document    Document    @relation(fields: [documentId], references: [id])

  // Timestamps
  createdAt DateTime @default(now())

  @@unique([applicationId, documentId]) // Prevent duplicate links
  @@index([applicationId])
  @@map("application_documents")
}

model ApplicationReview {
  id             String   @id @default(uuid())
  applicationId  String
  reviewerId     String
  score          Float?
  comments       String?
  recommendation String? // APPROVE, REJECT, WAITLIST
  reviewedAt     DateTime @default(now())

  // Relationships
  application Application @relation(fields: [applicationId], references: [id])
  reviewer    User        @relation(fields: [reviewerId], references: [id])

  @@index([applicationId])
  @@index([reviewerId])
  @@map("application_reviews")
}

model ApplicationHistory {
  id            String  @id @default(uuid())
  applicationId String
  action        String // CREATED, SUBMITTED, REVIEWED, APPROVED, etc.
  performedBy   String?
  notes         String?
  metadata      String? // JSON string

  // Relationships
  application Application @relation(fields: [applicationId], references: [id])
  user        User?       @relation(fields: [performedBy], references: [id])

  // Timestamps
  createdAt DateTime @default(now())

  @@index([applicationId])
  @@index([createdAt])
  @@map("application_history")
}

model AuditLog {
  id         String  @id @default(uuid())
  userId     String?
  action     String
  entityType String
  entityId   String?
  oldValues  String? // JSON string
  newValues  String? // JSON string
  ipAddress  String?
  userAgent  String?

  // Relationships
  user User? @relation(fields: [userId], references: [id])

  // Timestamps
  createdAt DateTime @default(now())

  @@index([userId])
  @@index([entityType, entityId])
  @@index([createdAt])
  @@map("audit_log")
}

// Development Office Profile
model DevelopmentOfficeProfile {
  id               String  @id @default(uuid())
  profileId        String  @unique
  department       String  @default("Development Office")
  responsibleAreas String? // JSON array of areas/regions they manage
  permissions      String  @default("[\"MANAGE_SCHOLARSHIPS\", \"VIEW_REPORTS\", \"MANAGE_SPONSORS\"]") // JSON array

  // Relationships
  profile Profile @relation(fields: [profileId], references: [id], onDelete: Cascade)

  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("development_office_profiles")
}

// Multi-year student scholarship tracking
model StudentScholarship {
  id        String @id @default(uuid())
  programId String
  cycleId   String // First awarded cycle
  userId    String

  // Multi-year tracking
  firstAwardedYear    String // "2024-2025"
  yearsReceived       Int    @default(1)
  maxYears            Int // From program.maxYearsPerStudent
  totalAmountReceived Float  @default(0)

  // Status
  isActive Boolean @default(true)
  status   String  @default("ACTIVE") // ACTIVE, COMPLETED, SUSPENDED, TERMINATED

  // Renewal tracking
  lastRenewalDate DateTime?
  nextRenewalDue  DateTime?
  renewalStatus   String    @default("NOT_DUE") // NOT_DUE, PENDING, APPROVED, REJECTED

  // Performance tracking
  academicStanding String? // GOOD, PROBATION, FAILING
  gpaRequirement   Float?
  lastGpaCheck     Float?
  gpaCheckDate     DateTime?

  // Relationships
  program  ScholarshipProgram @relation(fields: [programId], references: [id])
  cycle    ScholarshipCycle   @relation(fields: [cycleId], references: [id])
  user     User               @relation(fields: [userId], references: [id])
  renewals StudentRenewal[]

  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([programId, userId]) // One scholarship per student per program
  @@index([programId])
  @@index([userId])
  @@index([status])
  @@index([nextRenewalDue])
  @@map("student_scholarships")
}

// Renewal tracking for multi-year scholarships
model StudentRenewal {
  id                   String @id @default(uuid())
  studentScholarshipId String
  cycleId              String
  academicYear         String // "2025-2026"

  // Renewal decision
  status      String    @default("PENDING") // PENDING, APPROVED, REJECTED
  reviewedBy  String?
  reviewedAt  DateTime?
  reviewNotes String?

  // Requirements check
  gpaRequirement    Float?
  actualGpa         Float?
  meetsRequirements Boolean @default(false)

  // Amount
  amount           Float
  disbursed        Boolean   @default(false)
  disbursementDate DateTime?

  // Relationships
  studentScholarship StudentScholarship @relation(fields: [studentScholarshipId], references: [id])
  cycle              ScholarshipCycle   @relation(fields: [cycleId], references: [id])
  reviewer           User?              @relation("RenewalReviewer", fields: [reviewedBy], references: [id])

  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([studentScholarshipId, academicYear]) // One renewal per student per year
  @@index([studentScholarshipId])
  @@index([cycleId])
  @@index([status])
  @@map("student_renewals")
}
